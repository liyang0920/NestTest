/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package example.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Test1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test1\",\"namespace\":\"example.test\",\"fields\":[{\"name\":\"test1_ok\",\"type\":\"long\"},{\"name\":\"test1\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long test1_ok;
  @Deprecated public java.lang.CharSequence test1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Test1() {}

  /**
   * All-args constructor.
   */
  public Test1(java.lang.Long test1_ok, java.lang.CharSequence test1) {
    this.test1_ok = test1_ok;
    this.test1 = test1;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return test1_ok;
    case 1: return test1;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: test1_ok = (java.lang.Long)value$; break;
    case 1: test1 = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'test1_ok' field.
   */
  public java.lang.Long getTest1Ok() {
    return test1_ok;
  }

  /**
   * Sets the value of the 'test1_ok' field.
   * @param value the value to set.
   */
  public void setTest1Ok(java.lang.Long value) {
    this.test1_ok = value;
  }

  /**
   * Gets the value of the 'test1' field.
   */
  public java.lang.CharSequence getTest1() {
    return test1;
  }

  /**
   * Sets the value of the 'test1' field.
   * @param value the value to set.
   */
  public void setTest1(java.lang.CharSequence value) {
    this.test1 = value;
  }

  /** Creates a new Test1 RecordBuilder */
  public static example.test.Test1.Builder newBuilder() {
    return new example.test.Test1.Builder();
  }
  
  /** Creates a new Test1 RecordBuilder by copying an existing Builder */
  public static example.test.Test1.Builder newBuilder(example.test.Test1.Builder other) {
    return new example.test.Test1.Builder(other);
  }
  
  /** Creates a new Test1 RecordBuilder by copying an existing Test1 instance */
  public static example.test.Test1.Builder newBuilder(example.test.Test1 other) {
    return new example.test.Test1.Builder(other);
  }
  
  /**
   * RecordBuilder for Test1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test1>
    implements org.apache.avro.data.RecordBuilder<Test1> {

    private long test1_ok;
    private java.lang.CharSequence test1;

    /** Creates a new Builder */
    private Builder() {
      super(example.test.Test1.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(example.test.Test1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.test1_ok)) {
        this.test1_ok = data().deepCopy(fields()[0].schema(), other.test1_ok);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test1)) {
        this.test1 = data().deepCopy(fields()[1].schema(), other.test1);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Test1 instance */
    private Builder(example.test.Test1 other) {
            super(example.test.Test1.SCHEMA$);
      if (isValidValue(fields()[0], other.test1_ok)) {
        this.test1_ok = data().deepCopy(fields()[0].schema(), other.test1_ok);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test1)) {
        this.test1 = data().deepCopy(fields()[1].schema(), other.test1);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'test1_ok' field */
    public java.lang.Long getTest1Ok() {
      return test1_ok;
    }
    
    /** Sets the value of the 'test1_ok' field */
    public example.test.Test1.Builder setTest1Ok(long value) {
      validate(fields()[0], value);
      this.test1_ok = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'test1_ok' field has been set */
    public boolean hasTest1Ok() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'test1_ok' field */
    public example.test.Test1.Builder clearTest1Ok() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'test1' field */
    public java.lang.CharSequence getTest1() {
      return test1;
    }
    
    /** Sets the value of the 'test1' field */
    public example.test.Test1.Builder setTest1(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.test1 = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'test1' field has been set */
    public boolean hasTest1() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'test1' field */
    public example.test.Test1.Builder clearTest1() {
      test1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public Test1 build() {
      try {
        Test1 record = new Test1();
        record.test1_ok = fieldSetFlags()[0] ? this.test1_ok : (java.lang.Long) defaultValue(fields()[0]);
        record.test1 = fieldSetFlags()[1] ? this.test1 : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
