/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package example.test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Test2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Test2\",\"namespace\":\"example.test\",\"fields\":[{\"name\":\"test2_ok\",\"type\":\"long\"},{\"name\":\"test2_ck\",\"type\":\"long\"},{\"name\":\"ftest1\",\"type\":{\"type\":\"array\",\"items\":[{\"type\":\"record\",\"name\":\"Test1\",\"fields\":[{\"name\":\"test1_ok\",\"type\":\"long\"},{\"name\":\"test1\",\"type\":\"string\"}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long test2_ok;
  @Deprecated public long test2_ck;
  @Deprecated public java.util.List<java.lang.Object> ftest1;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Test2() {}

  /**
   * All-args constructor.
   */
  public Test2(java.lang.Long test2_ok, java.lang.Long test2_ck, java.util.List<java.lang.Object> ftest1) {
    this.test2_ok = test2_ok;
    this.test2_ck = test2_ck;
    this.ftest1 = ftest1;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return test2_ok;
    case 1: return test2_ck;
    case 2: return ftest1;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: test2_ok = (java.lang.Long)value$; break;
    case 1: test2_ck = (java.lang.Long)value$; break;
    case 2: ftest1 = (java.util.List<java.lang.Object>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'test2_ok' field.
   */
  public java.lang.Long getTest2Ok() {
    return test2_ok;
  }

  /**
   * Sets the value of the 'test2_ok' field.
   * @param value the value to set.
   */
  public void setTest2Ok(java.lang.Long value) {
    this.test2_ok = value;
  }

  /**
   * Gets the value of the 'test2_ck' field.
   */
  public java.lang.Long getTest2Ck() {
    return test2_ck;
  }

  /**
   * Sets the value of the 'test2_ck' field.
   * @param value the value to set.
   */
  public void setTest2Ck(java.lang.Long value) {
    this.test2_ck = value;
  }

  /**
   * Gets the value of the 'ftest1' field.
   */
  public java.util.List<java.lang.Object> getFtest1() {
    return ftest1;
  }

  /**
   * Sets the value of the 'ftest1' field.
   * @param value the value to set.
   */
  public void setFtest1(java.util.List<java.lang.Object> value) {
    this.ftest1 = value;
  }

  /** Creates a new Test2 RecordBuilder */
  public static example.test.Test2.Builder newBuilder() {
    return new example.test.Test2.Builder();
  }
  
  /** Creates a new Test2 RecordBuilder by copying an existing Builder */
  public static example.test.Test2.Builder newBuilder(example.test.Test2.Builder other) {
    return new example.test.Test2.Builder(other);
  }
  
  /** Creates a new Test2 RecordBuilder by copying an existing Test2 instance */
  public static example.test.Test2.Builder newBuilder(example.test.Test2 other) {
    return new example.test.Test2.Builder(other);
  }
  
  /**
   * RecordBuilder for Test2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Test2>
    implements org.apache.avro.data.RecordBuilder<Test2> {

    private long test2_ok;
    private long test2_ck;
    private java.util.List<java.lang.Object> ftest1;

    /** Creates a new Builder */
    private Builder() {
      super(example.test.Test2.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(example.test.Test2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.test2_ok)) {
        this.test2_ok = data().deepCopy(fields()[0].schema(), other.test2_ok);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test2_ck)) {
        this.test2_ck = data().deepCopy(fields()[1].schema(), other.test2_ck);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ftest1)) {
        this.ftest1 = data().deepCopy(fields()[2].schema(), other.ftest1);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Test2 instance */
    private Builder(example.test.Test2 other) {
            super(example.test.Test2.SCHEMA$);
      if (isValidValue(fields()[0], other.test2_ok)) {
        this.test2_ok = data().deepCopy(fields()[0].schema(), other.test2_ok);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.test2_ck)) {
        this.test2_ck = data().deepCopy(fields()[1].schema(), other.test2_ck);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ftest1)) {
        this.ftest1 = data().deepCopy(fields()[2].schema(), other.ftest1);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'test2_ok' field */
    public java.lang.Long getTest2Ok() {
      return test2_ok;
    }
    
    /** Sets the value of the 'test2_ok' field */
    public example.test.Test2.Builder setTest2Ok(long value) {
      validate(fields()[0], value);
      this.test2_ok = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'test2_ok' field has been set */
    public boolean hasTest2Ok() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'test2_ok' field */
    public example.test.Test2.Builder clearTest2Ok() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'test2_ck' field */
    public java.lang.Long getTest2Ck() {
      return test2_ck;
    }
    
    /** Sets the value of the 'test2_ck' field */
    public example.test.Test2.Builder setTest2Ck(long value) {
      validate(fields()[1], value);
      this.test2_ck = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'test2_ck' field has been set */
    public boolean hasTest2Ck() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'test2_ck' field */
    public example.test.Test2.Builder clearTest2Ck() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'ftest1' field */
    public java.util.List<java.lang.Object> getFtest1() {
      return ftest1;
    }
    
    /** Sets the value of the 'ftest1' field */
    public example.test.Test2.Builder setFtest1(java.util.List<java.lang.Object> value) {
      validate(fields()[2], value);
      this.ftest1 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'ftest1' field has been set */
    public boolean hasFtest1() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'ftest1' field */
    public example.test.Test2.Builder clearFtest1() {
      ftest1 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Test2 build() {
      try {
        Test2 record = new Test2();
        record.test2_ok = fieldSetFlags()[0] ? this.test2_ok : (java.lang.Long) defaultValue(fields()[0]);
        record.test2_ck = fieldSetFlags()[1] ? this.test2_ck : (java.lang.Long) defaultValue(fields()[1]);
        record.ftest1 = fieldSetFlags()[2] ? this.ftest1 : (java.util.List<java.lang.Object>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
